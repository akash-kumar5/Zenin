import {addDoc, collection, doc, setDoc} from '@react-native-firebase/firestore';
import { db } from './firebaseConfig';

type ParsedTransaction = {
  amount: number;
  type: 'expense' | 'income';
  vendor?: string;
  timestamp?: number;
  message: string;
  category: string;
};

const bankCodes = [
  'SBI', 'HDF', 'ICI', 'AXI', 'PNB', 'BOB', 'BOI', 'UBI',
  'KOT', 'IDB', 'IDF', 'YES', 'CAN', 'CBI','UCO' // covers most top Indian banks
];


// 1. Check if it’s a financial notification
export const isFinancialMessage = (title: string): boolean => {
  const regex = new RegExp(`(?:-|^)[A-Z]{2,3}?-?(${bankCodes.join('|')})[A-Z]{1,3}`, 'i');
  return regex.test(title);
};

// 2. Parse the message to extract transaction info
export const parseMessage = (msg: string): ParsedTransaction | null => {
  try {
    const amountMatch = msg.match(/(?:Rs\.?|₹|INR|debited by)\s?([\d,]+\.?\d{0,2})/i);

    const type =
      msg.toLowerCase().includes('debited') ||
      msg.toLowerCase().includes('spent')
        ? 'expense'
        : 'income';

    if (!amountMatch) return null;

    const amount = parseFloat(amountMatch[1].replace(/,/g, ''));
    const vendorMatch = msg.match(/trf to\s([A-Za-z0-9&\s,.-]+)\s+Refno/i);
    const vendor = vendorMatch?.[1]?.trim() || 'unknown';

    const dateMatch =
      msg.match(/\b\d{1,2}\/\d{1,2}\/\d{2,4}\b/) ||
      msg.match(/\b\d{1,2}[A-Za-z]{3}\d{2,4}\b/);
    const timestamp = dateMatch ? parseDate(dateMatch[0]) : Date.now();

    const category = inferCategory(msg);

    return {
      amount,
      type,
      vendor,
      timestamp,
      message: msg,
      category,
    };
  } catch (err) {
    console.error('Parsing failed:', err);
    return null;
  }
};

const parseDate = (dateStr: string): number => {
  if (/\d{1,2}\/\d{1,2}\/\d{2,4}/.test(dateStr)) {
    const [day, month, year] = dateStr.split('/').map(Number);
    const fullYear = year < 100 ? 2000 + year : year;
    return new Date(fullYear, month - 1, day).getTime();
  }

  const match = dateStr.match(/(\d{1,2})([A-Za-z]{3})(\d{2,4})/);
  if (match) {
    const [, dayStr, monthStr, yearStr] = match;
    const months = [
      'Jan',
      'Feb',
      'Mar',
      'Apr',
      'May',
      'Jun',
      'Jul',
      'Aug',
      'Sep',
      'Oct',
      'Nov',
      'Dec',
    ];
    const month = months.findIndex(
      (m) => m.toLowerCase() === monthStr.toLowerCase()
    );
    const year = parseInt(yearStr.length === 2 ? '20' + yearStr : yearStr);
    return new Date(year, month, parseInt(dayStr)).getTime();
  }

  return Date.now(); // fallback
};

const categoryKeywords: { [key: string]: string[] } = {
  Food: ['swiggy', 'zomato', 'mcdonald', 'domino', 'pizza', 'kfc'],
  Travel: ['ola', 'uber', 'irctc', 'indigo', 'air india', 'go air', 'spicejet'],
  Shopping: ['amazon', 'flipkart', 'myntra', 'ajio', 'meesho'],
  Bills: [
    'electricity',
    'bsnl',
    'jio',
    'airtel',
    'vi',
    'broadband',
    'recharge',
  ],
  Entertainment: ['netflix', 'hotstar', 'spotify', 'youtube'],
  Groceries: ['bigbasket', 'grofers', 'jiomart', 'more', 'dmart'],
  Finance: ['upi', 'imps', 'neft', 'bank', 'loan', 'sip', 'mutual fund'],
};

const inferCategory = (msg: string): string => {
  const lowerMsg = msg.toLowerCase();

  for (const category in categoryKeywords) {
    if (
      categoryKeywords[category].some((keyword) => lowerMsg.includes(keyword))
    ) {
      return category;
    }
  }

  return 'others';
};

// 3. Save to Firestore with autoGenerated + reviewed
export const saveParsedTransaction = async (
  uid: string,
  txn: ParsedTransaction
): Promise<void> => {
  try {
    if (!uid) {
      console.warn('UID missing while saving transaction');
      return;
    }
    await addDoc(collection(db, 'users', uid, 'transactions'),{
        amount: txn.amount,
        category: txn.category,
        createdAt: new Date(),
        date: new Date(txn.timestamp ?? Date.now()),
        transactionType: txn.type,
        paymentMethod: 'upi',
        description: txn.vendor ? ` ${txn.vendor}` : 'Auto-imported',
        autoGenerated: true,
        reviewed: false,
        originalMessage: txn.message,
      });
      console.log('successfully saved to transactions');
      
  } catch (err) {
    console.error('Firestore save failed:', err);
  }
};


export const handleMessage = (msg: string) => {
  console.log('Parsing Message:', msg);
  // Your logic to parse or respond to notification
};
